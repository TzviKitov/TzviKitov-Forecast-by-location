{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\zvito\\\\WebstormProjects\\\\ex3-ex3-tzvikitov_-_elifrancenhois\\\\src\\\\components\\\\Forecast.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport DisplaysForecastResults from \"./DisplaysForecastResults\";\n/**\n * Management of the forecast page.\n * In case a location is selected, its details will be displayed. Only if a location is selected and the forecast display button is also pressed - the forecast will be displayed.\n Move to another page, or clicking on the default selection bar will reset the forecast display\n * @param props locations list\n * @returns {JSX.Element}\n * @constructor\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Forecast = props => {\n  _s();\n\n  const [selectedLocation, setSelectedLocation] = useState({}); //Saves the selected location for immediate details, and for forecasting in the event of a button click\n\n  const [isSelected, setIsSelected] = useState(false);\n  /**\n   * List of placement options\n   */\n\n  const selectLocationsList = props.locations.map(location => /*#__PURE__*/_jsxDEV(\"option\", {\n    value: location.name,\n    onClick: () => {\n      setSelectedLocation(location);\n      setIsSelected(false);\n      document.getElementById(\"defaultSelected\").classList.remove(\"bg-light\");\n    },\n    children: [location.name, \" \"]\n  }, location.name.toString(), true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 9\n  }, this));\n  /**\n   * Selected location information\n   * @returns {JSX.Element}\n   * @constructor\n   */\n\n  const LocationDetails = () => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: selectedLocation.name ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card w-50\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-body\",\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            className: \"card-title\",\n            children: selectedLocation.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 44\n          }, this), \"  \", /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"card-text\",\n            children: [selectedLocation.latitude, \"\\xB0 , \", selectedLocation.longitude, \"\\xB0\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 101\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 13\n      }, this) : \"\"\n    }, void 0, false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-12 col-md-6 mb-1 mt-4 ml-5\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: event => {\n            event.preventDefault();\n            if (selectedLocation.name) setIsSelected(true);\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"form-select\",\n            size: \"8\",\n            multiple: true,\n            \"aria-label\": \"multiple select example\",\n            children: props.locations.length > 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                id: \"defaultSelected\",\n                className: \"bg-light\",\n                value: 'readOnly',\n                onClick: event => {\n                  setIsSelected(false);\n                  setSelectedLocation({}); // event.target.className.add(\"bg-light\");\n                },\n                children: \"Select a location from the list:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 51,\n                columnNumber: 37\n              }, this), selectLocationsList, \" \"]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"No locations yet. Go to the Locations tab to add a location\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"btn btn-primary mt-3\",\n            children: \"Show Forecast\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-12 col-md-6 mb-2 mt-4 ml-5\",\n        children: /*#__PURE__*/_jsxDEV(LocationDetails, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), isSelected ? /*#__PURE__*/_jsxDEV(DisplaysForecastResults, {\n      theLocation: selectedLocation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 27\n    }, this) : \"\"]\n  }, void 0, true);\n};\n\n_s(Forecast, \"KG1Z4gAUuS1wNQD5YD2nE3YjSBc=\");\n\n_c = Forecast;\nexport default Forecast;\n\nvar _c;\n\n$RefreshReg$(_c, \"Forecast\");","map":{"version":3,"names":["useState","DisplaysForecastResults","Forecast","props","selectedLocation","setSelectedLocation","isSelected","setIsSelected","selectLocationsList","locations","map","location","name","document","getElementById","classList","remove","toString","LocationDetails","latitude","longitude","event","preventDefault","length"],"sources":["C:/Users/zvito/WebstormProjects/ex3-ex3-tzvikitov_-_elifrancenhois/src/components/Forecast.js"],"sourcesContent":["import {useState} from \"react\";\nimport DisplaysForecastResults from \"./DisplaysForecastResults\";\n\n/**\n * Management of the forecast page.\n * In case a location is selected, its details will be displayed. Only if a location is selected and the forecast display button is also pressed - the forecast will be displayed.\n Move to another page, or clicking on the default selection bar will reset the forecast display\n * @param props locations list\n * @returns {JSX.Element}\n * @constructor\n */\nconst Forecast = (props) => {\n    const [selectedLocation, setSelectedLocation] = useState({}); //Saves the selected location for immediate details, and for forecasting in the event of a button click\n    const [isSelected, setIsSelected] = useState(false);\n\n    /**\n     * List of placement options\n     */\n    const selectLocationsList = props.locations.map((location) =>\n        <option key={location.name.toString()} value={location.name} onClick={() => {\n            setSelectedLocation(location);\n            setIsSelected(false)\n            document.getElementById(\"defaultSelected\").classList.remove(\"bg-light\");\n        }}>{location.name} </option>\n    );\n\n    /**\n     * Selected location information\n     * @returns {JSX.Element}\n     * @constructor\n     */\n    const LocationDetails = () => {\n        return (<>{selectedLocation.name ?\n            <div className=\"card w-50\">\n                <div className=\"card-body\"><h5 className=\"card-title\">{selectedLocation.name}</h5>  <p\n                    className=\"card-text\">{selectedLocation.latitude}&deg; , {selectedLocation.longitude}&deg;</p></div>\n            </div> : \"\"}\n        </>);\n    }\n\n    return (\n        <>\n            <div className={\"row\"}>\n                <div className={\"col-12 col-md-6 mb-1 mt-4 ml-5\"}>\n                    <form onSubmit={(event) => {\n                        event.preventDefault();\n                        if (selectedLocation.name) setIsSelected(true);\n                    }}>\n                        <select className=\"form-select\" size=\"8\" multiple aria-label=\"multiple select example\">\n                            {props.locations.length > 0 ? (<>\n                                    <option  id=\"defaultSelected\" className={\"bg-light\"} value={'readOnly'} onClick={(event) => {\n                                        setIsSelected(false);\n                                        setSelectedLocation({});\n                                        // event.target.className.add(\"bg-light\");\n                                    }}>Select a location from the list:\n                                    </option>\n                                    {selectLocationsList} </>) :\n                                <option>No locations yet. Go to the Locations tab to add a location</option>}\n                        </select>\n                        <button type=\"submit\" className=\"btn btn-primary mt-3\">Show Forecast</button>\n                    </form>\n                </div>\n                <div className={\"col-12 col-md-6 mb-2 mt-4 ml-5\"}>\n                    <LocationDetails/>\n                </div>\n            </div>\n            {isSelected ? <DisplaysForecastResults theLocation={selectedLocation}/> : \"\"}\n\n        </>);\n}\n\nexport default Forecast;"],"mappings":"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"},"metadata":{},"sourceType":"module"}